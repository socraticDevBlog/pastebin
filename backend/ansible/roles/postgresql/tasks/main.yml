- name: Install required Python packages
  apt:
    name:
      - python3-psycopg2
      - python3-pip
    state: present

- name: Import PostgreSQL signing key
  apt_key:
    url: https://www.postgresql.org/media/keys/ACCC4CF8.asc
    state: present

- name: Add PostgreSQL APT repository
  apt_repository:
    repo: "deb http://apt.postgresql.org/pub/repos/apt/ {{ ansible_distribution_release }}-pgdg main"
    state: present
    filename: "pgdg"

- name: Install PostgreSQL
  apt:
    name:
      - "postgresql-{{ postgresql_version }}"
      - "postgresql-client-{{ postgresql_version }}"
      - postgresql-contrib
      - libpq-dev
    state: present

- name: Check if PostgreSQL is initialized
  ansible.builtin.stat:
    path: "{{ postgresql_data_dir }}/pg_hba.conf"
  register: postgres_data

- name: Empty data dir
  ansible.builtin.file:
    path: "{{ postgresql_data_dir }}"
    state: absent
  when: not postgres_data.stat.exists

- name: Initialize PostgreSQL
  ansible.builtin.shell: "{{ postgresql_bin_path }}/initdb -D {{ postgresql_data_dir }}"
  become: true
  become_user: postgres
  when: not postgres_data.stat.exists

- name: Configure unix_socket_directories in postgresql.conf
  lineinfile:
    path: "/etc/postgresql/{{ postgresql_version }}/main/postgresql.conf"
    regexp: "^#?unix_socket_directories"
    line: "unix_socket_directories = '/var/run/postgresql'"
    state: present
  notify:
    - restart postgresql

- name: Ensure /var/run/postgresql exists
  file:
    path: "/var/run/postgresql"
    state: directory
    owner: postgres
    group: postgres
    mode: "2775"

- name: Start and enable service
  ansible.builtin.service:
    name: postgresql
    state: started
    enabled: true

- name: temporary trust authentication for postgres user
  lineinfile:
    path: "/etc/postgresql/{{ postgresql_version }}/main/pg_hba.conf"
    regexp: '^local\s+all\s+postgres.*$'
    line: "local   all             postgres                                trust"
  notify:
    - reload postgresql
  tags:
    - authentication

# Force the execution of handlers to ensure PostgreSQL is reloaded
- name: Ensure PostgreSQL is reloaded before creating the database
  meta: flush_handlers

- name: Create development database
  postgresql_db:
    name: "{{ db_name }}"
    state: present
  tags:
    - db
    - db-setup

- name: Create development user
  postgresql_user:
    name: "{{ db_user }}"
    password: "{{ dev_db_password }}"
    state: present
  tags:
    - user
    - user-setup

- name: Grant ownership of the database to devuser
  postgresql_db:
    name: "{{ db_name }}"
    owner: "{{ db_user }}"
    state: present
  tags:
    - permissions
    - ownership

- name: Create schema dev_schema
  postgresql_query:
    db: "{{ db_name }}"
    query: "CREATE SCHEMA IF NOT EXISTS dev_schema AUTHORIZATION {{ db_user
    }};"
  tags:
    - schema
    - schema-setup
    
- name: Configure PostgreSQL authentication for postgres user
  lineinfile:
    path: "/etc/postgresql/{{ postgresql_version }}/main/pg_hba.conf"
    regexp: '^local\s+all\s+postgres.*$'
    line: "local   all             postgres                                peer"
  notify:
    - restart postgresql
  tags:
    - authentication

- name: Configure PostgreSQL authentication for all local users
  lineinfile:
    path: "/etc/postgresql/{{ postgresql_version }}/main/pg_hba.conf"
    regexp: '^local\s+all\s+all.*$'
    line: "local   all             local                                scram-sha-256"
  notify:
    - restart postgresql
  tags:
    - authentication
